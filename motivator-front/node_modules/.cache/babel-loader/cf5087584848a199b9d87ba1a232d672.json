{"ast":null,"code":"var _jsxFileName = \"E:\\\\\\u0423\\u0447\\u0451\\u0431\\u0430\\\\4 \\u043A\\u0443\\u0440\\u0441\\\\kurswatch7-front\\\\src\\\\component\\\\BenefitPopFormComponent.jsx\";\nimport React, { Component } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport HealthBenefitsDataService from '../service/HealthBenefitsDataService';\n\nconst PopPop = require('react-poppop');\n\nclass BenefitPopFormComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleShow = show => {\n      this.setState({\n        show\n      });\n    };\n\n    this.state = {\n      id: this.props.id,\n      reason: '',\n      amount: '',\n      date: '',\n      user: {\n        id: this.props.userId\n      },\n      show: false\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validate = this.validate.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(this.state.id); // eslint-disable-next-line\n\n    if (this.state.id == -1) {\n      return;\n    }\n\n    HealthBenefitsDataService.retrieveBenefit(this.state.id).then(response => {\n      this.setState({\n        reason: response.data.reason,\n        amount: response.data.amount,\n        date: response.data.date,\n        user: {\n          id: response.data.user.id\n        }\n      });\n    });\n  }\n\n  onSubmit(values) {\n    let benefit = {\n      id: this.state.id,\n      reason: values.reason,\n      amount: values.amount,\n      date: values.date,\n      user: {\n        id: this.state.user.id\n      }\n    };\n\n    if (values.id == -1) {\n      HealthBenefitsDataService.createBenefit(benefit).then(() => {\n        this.toggleShow(false);\n        document.location.href = \"/userdetails/\".concat(this.state.user.id); // this.props.history.push('/bonuses')\n      });\n    } else {\n      HealthBenefitsDataService.updateBenefit(this.state.id, benefit).then(() => this.props.history.push('/healthbenefits'));\n    }\n\n    console.log(values);\n  }\n\n  validate(values) {\n    let errors = {}; // if (values.type.length < 3) {\n    //     errors.type = 'Имя должно состоять минимум из 2-х букв'\n    // }\n    // if (!values.salary) {\n    //     errors.salary = 'Введите фамилию'\n    // }\n    // if (!values.premiya) {\n    //     errors.premiya = 'Фамилия должно состоять минимум из 2-х букв'\n    // }\n    // if (!values.sum) {\n    //     errors.sum = 'Введите возраст'\n    // }\n    // if (!values.month) {\n    //     errors.month = 'Введите месяц'\n    // }\n    // console.log(values.user)\n    // if (values.user.id === \"\") {\n    //     errors.user = 'Выберите сотрудника перед сохранением'\n    // }\n\n    return errors;\n  }\n\n  render() {\n    const show = this.state.show;\n    let _this$state = this.state,\n        id = _this$state.id,\n        reason = _this$state.reason,\n        amount = _this$state.amount,\n        date = _this$state.date,\n        user = _this$state.user;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-success\",\n      onClick: () => this.toggleShow(true),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"), React.createElement(PopPop, {\n      position: \"centerCenter\",\n      open: show,\n      closeBtn: true,\n      closeOnEsc: true,\n      onClose: () => this.toggleShow(false),\n      closeOnOverlay: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"\\u041F\\u0440\\u0435\\u043C\\u0438\\u044F\"), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(Formik, {\n      initialValues: {\n        id,\n        reason,\n        amount,\n        date,\n        user\n      },\n      onSubmit: this.onSubmit,\n      validateOnChange: false,\n      validateOnBlur: false,\n      validate: this.validate,\n      enableReinitialize: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, props => React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Id\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"id\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    })), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"\\u041F\\u0440\\u0438\\u0447\\u0438\\u043D\\u0430 \\u0432\\u044B\\u043F\\u043B\\u0430\\u0442\\u044B \\u0415\\u0412\\u041E\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"reason\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    })), React.createElement(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"\\u0414\\u0430\\u0442\\u0430\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"date\",\n      name: \"date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      className: \"btn btn-success\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\")))))));\n  }\n\n}\n\nexport default BenefitPopFormComponent;","map":{"version":3,"sources":["E:/Учёба/4 курс/kurswatch7-front/src/component/BenefitPopFormComponent.jsx"],"names":["React","Component","Formik","Form","Field","ErrorMessage","HealthBenefitsDataService","PopPop","require","BenefitPopFormComponent","constructor","props","toggleShow","show","setState","state","id","reason","amount","date","user","userId","onSubmit","bind","validate","componentDidMount","console","log","retrieveBenefit","then","response","data","values","benefit","createBenefit","document","location","href","updateBenefit","history","push","errors","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport HealthBenefitsDataService from '../service/HealthBenefitsDataService';\r\nconst PopPop = require('react-poppop');\r\n\r\nclass BenefitPopFormComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            id: this.props.id,\r\n            reason: '',\r\n            amount: '',\r\n            date: '',\r\n            user: {\r\n                id: this.props.userId\r\n            },\r\n            show: false\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        console.log(this.state.id)\r\n\r\n        // eslint-disable-next-line\r\n        if (this.state.id == -1) {\r\n            return\r\n        }\r\n\r\n        HealthBenefitsDataService.retrieveBenefit(this.state.id)\r\n            .then(response => {\r\n                this.setState({\r\n                    reason: response.data.reason,\r\n                    amount: response.data.amount,\r\n                    date: response.data.date,\r\n                    user: {\r\n                        id: response.data.user.id\r\n                    }\r\n                })\r\n            })\r\n    }\r\n\r\n    onSubmit(values) {\r\n        let benefit = {\r\n            id: this.state.id,\r\n            reason: values.reason,\r\n            amount: values.amount,\r\n            date: values.date,\r\n            user: {\r\n                id: this.state.user.id\r\n            }\r\n        }\r\n\r\n\r\n        if (values.id == -1) {\r\n            HealthBenefitsDataService.createBenefit(benefit)\r\n                .then(() => {\r\n                    this.toggleShow(false);\r\n                    document.location.href = `/userdetails/${this.state.user.id}`;\r\n                    // this.props.history.push('/bonuses')\r\n                })\r\n        } else {\r\n            HealthBenefitsDataService.updateBenefit(this.state.id, benefit)\r\n                .then(() => this.props.history.push('/healthbenefits'))\r\n        }\r\n\r\n        console.log(values);\r\n    }\r\n\r\n    validate(values) {\r\n        let errors = {}\r\n        // if (values.type.length < 3) {\r\n        //     errors.type = 'Имя должно состоять минимум из 2-х букв'\r\n        // }\r\n        // if (!values.salary) {\r\n        //     errors.salary = 'Введите фамилию'\r\n        // }\r\n        // if (!values.premiya) {\r\n        //     errors.premiya = 'Фамилия должно состоять минимум из 2-х букв'\r\n        // }\r\n        // if (!values.sum) {\r\n        //     errors.sum = 'Введите возраст'\r\n        // }\r\n        // if (!values.month) {\r\n        //     errors.month = 'Введите месяц'\r\n        // }\r\n        // console.log(values.user)\r\n        // if (values.user.id === \"\") {\r\n        //     errors.user = 'Выберите сотрудника перед сохранением'\r\n        // }\r\n\r\n        return errors\r\n    }\r\n\r\n    toggleShow = show => {\r\n        this.setState({ show });\r\n    }\r\n\r\n\r\n    render() {\r\n        const { show } = this.state;\r\n        let { id, reason, amount, date, user } = this.state\r\n\r\n        return (\r\n            <div>\r\n                <button className=\"btn btn-success\" onClick={() => this.toggleShow(true)}>Добавить</button>\r\n                <PopPop position=\"centerCenter\"\r\n                    open={show}\r\n                    closeBtn={true}\r\n                    closeOnEsc={true}\r\n                    onClose={() => this.toggleShow(false)}\r\n                    closeOnOverlay={true}>\r\n                    <div>\r\n                        <h3>Премия</h3>\r\n                        <div className=\"container\">\r\n                            <Formik\r\n                                initialValues={{ id, reason, amount, date, user }}\r\n                                onSubmit={this.onSubmit}\r\n                                validateOnChange={false}\r\n                                validateOnBlur={false}\r\n                                validate={this.validate}\r\n                                enableReinitialize={true}\r\n                            >\r\n                                {\r\n                                    (props) => (\r\n                                        <Form>\r\n                                            {/* <ErrorMessage name=\"type\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    <ErrorMessage name=\"salary\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    <ErrorMessage name=\"premiya\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    <ErrorMessage name=\"sum\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    <ErrorMessage name=\"month\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    <ErrorMessage name=\"user\" component=\"div\"\r\n                                        className=\"alert alert-warning\" /> */}\r\n                                            <fieldset className=\"form-group\">\r\n                                                <label>Id</label>\r\n                                                <Field className=\"form-control\" type=\"text\" name=\"id\" disabled />\r\n                                            </fieldset>\r\n                                            <fieldset className=\"form-group\">\r\n                                                <label>Причина выплаты ЕВО</label>\r\n                                                <Field className=\"form-control\" type=\"text\" name=\"reason\" />\r\n                                            </fieldset>\r\n                                            <fieldset>\r\n                                                <label>Дата</label>\r\n                                                <Field className=\"form-control\" type=\"date\" name=\"date\" />\r\n                                            </fieldset>\r\n                                            <button className=\"btn btn-success\" type=\"submit\">Сохранить</button>\r\n                                        </Form>\r\n                                    )\r\n                                }\r\n                            </Formik>\r\n                        </div>\r\n                    </div>\r\n                </PopPop>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default BenefitPopFormComponent"]},"metadata":{},"sourceType":"module"}