{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080';\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    return axios.get(\"\".concat(API_URL, \"/basicauth\"), {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  }\n\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(unescape(encodeURIComponent(username + \":\" + password)));\n  }\n\n  registerSuccessfulLogin(username, password) {\n    //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n    //console.log('registerSuccessfulLogin')\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  }\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["E:/Учёба/4 курс/kurswatch7-front/src/service/AuthenticationService.js"],"names":["axios","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","executeBasicAuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","window","btoa","unescape","encodeURIComponent","registerSuccessfulLogin","sessionStorage","setItem","setupAxiosInterceptors","token","interceptors","request","use","config","isUserLoggedIn","logout","removeItem","user","getItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,MAAMC,OAAO,GAAG,uBAAhB;AACA,OAAO,MAAMC,gCAAgC,GAAG,mBAAzC;;AAEP,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,iCAAiC,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAClD,WAAON,KAAK,CAACO,GAAN,WAAaN,OAAb,iBACH;AAAEO,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC;AAAjB;AAAX,KADG,CAAP;AAEH;;AAEDI,EAAAA,oBAAoB,CAACL,QAAD,EAAWC,QAAX,EAAqB;AACrC,WAAO,WAAWK,MAAM,CAACC,IAAP,CAAYC,QAAQ,CAACC,kBAAkB,CAACT,QAAQ,GAAG,GAAX,GAAiBC,QAAlB,CAAnB,CAApB,CAAlB;AACH;;AAEDS,EAAAA,uBAAuB,CAACV,QAAD,EAAWC,QAAX,EAAqB;AACxC;AACA;AACAU,IAAAA,cAAc,CAACC,OAAf,CAAuBf,gCAAvB,EAAyDG,QAAzD;AACA,SAAKa,sBAAL,CAA4B,KAAKR,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC,CAA5B;AACH;;AAEDY,EAAAA,sBAAsB,CAACC,KAAD,EAAQ;AAC1BnB,IAAAA,KAAK,CAACoB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKC,cAAL,EAAJ,EAA2B;AACvBD,QAAAA,MAAM,CAACf,OAAP,CAAeC,aAAf,GAA+BU,KAA/B;AACH;;AACD,aAAOI,MAAP;AACH,KANL;AAQH;;AAEDE,EAAAA,MAAM,GAAG;AACLT,IAAAA,cAAc,CAACU,UAAf,CAA0BxB,gCAA1B;AACH;;AACDsB,EAAAA,cAAc,GAAG;AACb,QAAIG,IAAI,GAAGX,cAAc,CAACY,OAAf,CAAuB1B,gCAAvB,CAAX;AACA,QAAIyB,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AApCuB;;AAwC5B,eAAe,IAAIxB,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\r\nconst API_URL = 'http://localhost:8080'\r\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\r\n\r\nclass AuthenticationService {\r\n\r\n    executeBasicAuthenticationService(username, password) {\r\n        return axios.get(`${API_URL}/basicauth`,\r\n            { headers: { authorization: this.createBasicAuthToken(username, password) } })\r\n    }\r\n\r\n    createBasicAuthToken(username, password) {\r\n        return 'Basic ' + window.btoa(unescape(encodeURIComponent(username + \":\" + password)))\r\n    }\r\n\r\n    registerSuccessfulLogin(username, password) {\r\n        //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\r\n        //console.log('registerSuccessfulLogin')\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\r\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\r\n    }\r\n\r\n    setupAxiosInterceptors(token) {\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if (this.isUserLoggedIn()) {\r\n                    config.headers.authorization = token\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n\r\n    logout() {\r\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n    }\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return false\r\n        return true\r\n    }\r\n\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}